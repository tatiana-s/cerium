typedef ID = signed<32>
typedef Type = VoidType 
             | IntType 
             | FloatType 
             | CharType

// Direct mapping to AST relations defined in framework.
input relation TransUnit(id: ID, body_ids: Vec<ID>)
input relation FunDef(id: ID, fun_name: string, return_type_id: ID, arg_ids: Vec<ID>, body_id: ID)
input relation FunCall(id: ID, fun_name: string, arg_ids: Vec<ID>)
input relation Compound(id: ID, start_id: ID)
input relation Item(id: ID, stmt_id: ID, next_stmt_id: ID)
input relation EndItem(id: ID, stmt_id: ID)
input relation Assign(id: ID, var_name: string, type_id: ID, expr_id: ID)
input relation Return(id: ID, expr_id: ID)
input relation If(id: ID, cond_id: ID, then_id: ID)
input relation IfElse(id: ID, cond_id: ID, then_id: ID, else_id: ID)
input relation While(id: ID, cond_id: ID, body_id: ID)
input relation BinaryOp(id: ID, arg1_id: ID, arg2_id: ID)
input relation Var(id: ID, var_name: string)
input relation Arg(id: ID, var_name: string, type_id: ID)
input relation Void(id: ID)
input relation Int(id: ID)
input relation Float(id: ID)
input relation Char(id: ID)

// Main output relations (intermediate relations specified in place).
output relation Program(id: ID)
output relation OkProgram(id: ID)

// Typing rules.
Program(id) :-
    TransUnit(id, _).

// A translation unit is well-typed if all declarations in it are well-typed.
output relation TypedTransUnit(id: ID)
output relation BodyErrorTransUnit(id: ID)

OkProgram(id) :-
    TypedTransUnit(id).

TypedTransUnit(id) :-
    TransUnit(id, _),
    not BodyErrorTransUnit(id).

BodyErrorTransUnit(id) :-
    TransUnit(id, body_ids),
    var body_id = FlatMap(body_ids),
    not TypedDeclaration(body_id).


// Only function definitions are declarations at the moment.
// A function definition is well typed if the compound statement block is well-typed
// + the return statement type matches the function return type (if there is no return the type is void).
output relation TypedDeclaration(id: ID)
output relation TypedFunDef(id: ID)

TypedDeclaration(id) :-
    TypedFunDef(id).

TypedFunDef(id) :-
    FunDef(id, fun_name, return_type_id, arg_ids, body_id),
    TypedLiteral(return_type_id, VoidType),
    TypedCompound(body_id).

TypedFunDef(id) :-
    FunDef(id, fun_name, return_type_id, arg_ids, body_id),
    TypedLiteral(return_type_id, return_type),
    TypedReturnCompound(body_id, return_type).


// A compound not well-typed if either the return types don't match or one of the statements inside isn't well-typed.
// The compund needs to check all all statements in sequence (all returns need to match, there can be multiple).
output relation TypedCompound(id: ID)
output relation TypedItem(id: ID)
output relation TypedReturnCompound(id: ID, fun_return_type_id: Type)
output relation TypedReturnItem(id: ID, return_type: Type)

// Case: no return statement inside the compound block.
TypedCompound(id) :-
    Compound(id, start_id),
    TypedItem(start_id).

TypedItem(id) :-
    Item(id, stmt_id, next_stmt_id),
    TypedStatement(stmt_id),
    TypedItem(next_stmt_id).

TypedItem(id) :-
    EndItem(id, stmt_id),
    TypedStatement(stmt_id).

// Case: return statement inside compound so must match with function return type.
TypedReturnCompound(id, fun_return_type) :-
    Compound(id, start_id),
    TypedReturnItem(start_id, fun_return_type).

TypedReturnItem(id, fun_return_type) :-
    Item(id, stmt_id, next_stmt_id),
    TypedStatement(stmt_id),
    TypedReturnItem(next_stmt_id, fun_return_type).

TypedReturnItem(id, fun_return_type) :-
    Item(id, stmt_id, next_stmt_id),
    TypedIfStatement(stmt_id, fun_return_type),
    TypedReturnItem(next_stmt_id, fun_return_type).

TypedReturnItem(id, fun_return_type) :-
    EndItem(id, stmt_id),
    TypedReturn(stmt_id, fun_return_type).

TypedReturnItem(id, fun_return_type) :-
    EndItem(id, stmt_id),
    TypedIfElseStatement(stmt_id, fun_return_type).


// Different types of statements: Assign, Return.
// Return has a type so it can be checked against function return types.
// Additionally any expression can be a statement.
output relation TypedStatement(id: ID)
output relation TypedReturn(id: ID, t: Type)
output relation TypedIfStatement(id: ID, t: Type)
output relation TypedIfElseStatement(id: ID, t:Type)

TypedStatement(id) :-
    Assign(id, _, type_id, expr_id), 
    TypesMatch(type_id, expr_id).

TypedStatement(id) :-
    TypedExpr(id, _).

TypedStatement(id) :-
    TypedIfStatement(id, _).

TypedIfStatement(id, t) :-
    If(id, cond_id, then_id),
    TypedExpr(cond_id, IntType),
    TypedReturnCompound(then_id, t).

TypedIfElseStatement(id, t) :-
    IfElse(id, cond_id, then_id, else_id),
    TypedExpr(cond_id, IntType),
    TypedReturnCompound(then_id, t),
    TypedReturnCompound(else_id, t).

TypedIfStatement(id, VoidType) :-
    If(id, cond_id, then_id),
    TypedExpr(cond_id, IntType),
    TypedCompound(then_id).

TypedIfElseStatement(id, VoidType) :-
    IfElse(id, cond_id, then_id, else_id),
    TypedExpr(cond_id, IntType),
    TypedCompound(then_id),
    TypedCompound(else_id).

TypedStatement(id) :-
    While(id, cond_id, body_id),
    TypedExpr(cond_id, IntType),
    TypedCompound(body_id).

TypedReturn(id, t) :-
    Return(id, expr_id),
    TypedExpr(expr_id, t).

// Different types of expressions: literals, variables, function calls, binary operators.
output relation TypedExpr(id: ID, t: Type)
output relation TypedLiteral(id: ID, t: Type)
output relation ArithmeticType(id: ID, t: Type)
output relation TypedArgument(id: ID, t: Type)

TypedExpr(id, t) :-
    TypedLiteral(id, t).

TypedExpr(id, t) :-
    Var(id, var_name),
    FindVarBinding(id, var_name, t).

TypedExpr(id, return_type) :-
    FunCall(id, fun_name, call_args),
    TransUnit(search_start_id, _),
    FindFunBinding(search_start_id, fun_name, return_type, function_args),
    var call_ids = FlatMap(call_args),
    var function_ids = FlatMap(function_args),
    TypedLiteral(call_ids, arg_types),
    TypedArgument(function_ids, arg_types).

TypedArgument(id, t) :-
    Arg(id, _, type_id),
    TypedLiteral(type_id, t).

TypedExpr(id, t) :-
    BinaryOp(id, arg1_id, arg2_id),
    ArithmeticType(arg1_id, t),
    ArithmeticType(arg2_id, t).

// Check if integer/float operations can be performed.
ArithmeticType(id, IntType) :-
    TypedExpr(id, IntType).

ArithmeticType(id, FloatType) :-
    TypedExpr(id, FloatType).
    
// Leaf types (literals).
TypedLiteral(id, VoidType) :- Void(id).
TypedLiteral(id, IntType) :- Int(id).
TypedLiteral(id, FloatType) :- Float(id).
TypedLiteral(id, CharType) :- Char(id).


// Context lookup relations.
output relation FindVarBinding(current_id: ID, var_name: string, t: Type)
output relation FindArgVarBinding(current_id: ID, var_name: string, t: Type)
output relation FindFunBinding(current_id: ID, fun_name: string, return_type: Type, arg_type_ids: Vec<ID>)

// Check any parent term the variable could appear in until you reach an assignment or argument declaration with matching name.
// (Basically performs a search up the abstract syntax tree).

// Case: found assignment and names match.
// (We just take the declared type as given since the expression will be type checked at some point anyway).
FindVarBinding(id, var_name_found, t) :-
    Assign(id, var_name_found, type_id, expr_id),
    TypedLiteral(type_id, t).

// Case: found function definition so need to check arguments.
FindVarBinding(id, var_name, t) :-
    FunDef(_, _, _, arg_ids, id),
    var next_id = FlatMap(arg_ids),
    FindArgVarBinding(next_id, var_name, t).

// Case: found in argument declaration and names match.
FindArgVarBinding(id, var_name_found, t) :-
    Arg(id, var_name_found, type_id),
    TypedLiteral(type_id, t).

// Case: just continue searching.
// -> var can be part of an arithmetic expression.
FindVarBinding(id, var_name, t) :-
    BinaryOp(next_id, id, arg2_id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    BinaryOp(next_id, arg1_id, id),
    FindVarBinding(next_id, var_name, t).

// -> var can be in a return statement.
FindVarBinding(id, var_name, t) :-
    Return(next_id, id),
    FindVarBinding(next_id, var_name, t).

// -> var can be inside a compound item (either check inside or check previous item if there exist one).
FindVarBinding(id, var_name, t) :-
    Compound(next_id, id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    Item(next_id, id, _),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    EndItem(next_id, id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    Item(_, next_id, id),
    FindVarBinding(next_id, var_name, t).

// -> also need to traverse if and while statements.
FindVarBinding(id, var_name, t) :-
    If(next_id, _, id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    If(next_id, id, _),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    IfElse(next_id, _, id, _),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    IfElse(next_id, _, _, id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    IfElse(next_id, id, _, _),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    While(next_id, _, id),
    FindVarBinding(next_id, var_name, t).

FindVarBinding(id, var_name, t) :-
    While(next_id, id, _),
    FindVarBinding(next_id, var_name, t).

// Similar approach for finding function definitions (since we don't have higher-order functions).
// At the moment functions are only defined in one possible position (declarations inside a translation unit) which makes the search a bit easier.

// Case: need to search for definition in translation unit.
FindFunBinding(id, fun_name, return_type, arg_type_ids) :- 
    TransUnit(id, body_ids),
    var next_id = FlatMap(body_ids),
    FindFunBinding(next_id, fun_name, return_type, arg_type_ids).

// Case: found right function.
FindFunBinding(id, fun_name, return_type, arg_type_ids) :- 
    FunDef(id, fun_name, return_type_id, arg_type_ids, _),
    TypedLiteral(return_type_id, return_type).


// Helper relations.
relation TypesMatch(id1: ID, id2: ID)

// Rule for seeing if types match.
TypesMatch(id1, id2) :-
    TypedExpr(id1, t),
    TypedExpr(id2, t).
       